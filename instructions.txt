Terminlogical instruction:
Strictly follow these instruction for their respective queries
1. Delay in order : The delay can be calculated as the difference between the `latest_po_receive_date` and the `requested_date` in the `md_salesorder` table and you should only filter results to include only orders with a po_status of 'Delayed' in where condition.
2. Details on specific order : to find details of specific order you should strictly use md_salesorder table and select all columns and filter it in 'where' by using sales_order column.
2. 4. to find the top 5 orders with the highest delay for high-priority customers. Use the md_salesorder and md_customer tables, joining them on customer_id. Calculate the delay as the difference in days between requested_date and latest_po_receive_date, and select relevant fields such as sales_order, customer_id, location_id, product_id, latest_po_receive_date, po_status, requested_date, and vendor_id. Filter to include only customers with a cp_customer_attribute set to 'High Priority', and sort by delay in descending order
3.to identify the options available to expedite a specified order from the existing vendor, including the cost impact.nnn is order number from query or context, strictly use this sql query 
SELECT DISTINCT 
    ls.ship_from_loc_id, 
    ls.product_id, 
    ls.location_id, 
    ls.mode_of_transport_id, 
    ls.transportation_lead_time, 
    so.requested_quantity, 
    tr.cost_rollup_transportation_cost_rate
FROM 
    sop_da.sop_da.md_location_source ls
JOIN 
    sop_da.sop_da.md_salesorder so 
    ON CAST(ls.product_id AS STRING) = CAST(so.product_id AS STRING) 
    AND CAST(ls.location_id AS STRING) = CAST(so.location_id AS STRING)
JOIN 
    sop_da.sop_da.md_transaction tr 
    ON CAST(ls.mode_of_transport_id AS STRING) = CAST(tr.mot_id AS STRING)
WHERE 
    CAST(so.sales_order AS STRING) = 'nnn'  -- here include order number from query
    AND CAST(ls.ship_from_loc_id AS STRING) = CAST(so.vendor_id AS STRING); -- Ensure type matching
4.to find low/medium priority orders for reassignment to fulfill a specified order: Use the md_salesorder and md_customer tables, joining on customer_id. Select relevant fields such as sales_order, customer_id, product_id, requested_quantity, requested_date, and po_status. Filter for orders that match the same product_id as the specified order and have a po_status of 'Delayed'. Additionally, ensure the customer priority level is either 'Low Priority' or 'Medium Priority'."
5.to find alternate vendors that can fulfill a specific order by retrieving vendor and transportation details.remember strictly you should include CAST as STRING on every columns which we are using in or during joins in generated sql query, Use md_location_source to identify vendors, joining it with md_salesorder on matching product and location IDs but excluding the current vendor. Filter results for a specified sales_order ID without hardcoding the value. Select fields such as ship_from_loc_id, product_id, location_id, mode_of_transport_id,md_salesorder.requested_quantity and transportation_lead_time to display relevant vendor options. Use SELECT DISTINCT in sql query.
10. Generate an SQL query that identifies products and customer combinations where annual budget revenue targets are not being met for a given year. Select columns for product_id, customer_id, customer_region, and the year-to-date revenue gap (YTD_REVENUE_GAP_AGAINST_TARGET_REVENUE) from the md_transaction and md_customer tables, labeling this gap as total_revenue_gap. Ensure the query dynamically calculates the key_figure_date to select records for the first of December of the specified year, without hardcoding the date (e.g., for 2024, use 2024-12-01). Perform an inner join between md_transaction and md_customer on customer_id to bring in customer_region. Finally, sort the results in descending order of total_revenue_gap, highlighting combinations with the largest gaps against the target revenue.
11. for questions of format If we reduce the selling price by x%, increase the demand by y% above 3 combinations then what will be the revenue gap for each of them?
Strictly use this sql query. 
note mm is current month
  WITH top_3_combinations AS(  SELECT
        tr.product_id, 
        tr.customer_id,
        cu.customer_region,
        tr.GROSS_TARGET_REVENUE_YTD as target_revenue,
        tr.YTD_ACTUALS_REVENUE_CONSENSUS_DEMAND_REVENUE as ytd_actual_revenue,
        tr.YTD_REVENUE_GAP_AGAINST_TARGET_REVENUE AS original_revenue_gap
    FROM 
        sop_da.sop_da.md_transaction tr
    JOIN 
        sop_da.sop_da.md_customer cu ON tr.customer_id = cu.customer_id
    WHERE 
        key_figure_date = 'yyyy-12-01' -- yyyy  is the current year 2024 or 2025
    ORDER BY 
        tr.YTD_REVENUE_GAP_AGAINST_TARGET_REVENUE DESC 
    limit 3),

price_data AS(
SELECT 
    t.product_id,
    t.customer_id,
    MAX(price_m) AS price_m
FROM 
    sop_da.sop_da.md_transaction t
WHERE 
    key_figure_date BETWEEN 'yyyy-mm-01' AND 'yyyy-12-01'
    AND date_format(key_figure_date, 'dd') = '01'
GROUP BY 
    t.product_id, t.customer_id),


demand_data AS (
SELECT 
        t.product_id,
        t.customer_id,
        MAX(consensus_baseline_demand ) AS consensus_baseline_demand
    FROM 
        sop_da.sop_da.md_transaction t
    WHERE 
        key_figure_date BETWEEN 'yyyy-mm-01' AND 'yyyy-12-01' 
        AND date_format(key_figure_date, 'dd') = '01'
    GROUP BY 
        t.product_id, t.customer_id),

monthly_projected_revenue AS (
SELECT DISTINCT
    month(key_figure_date) AS revenue_month,
    t.product_id,
    t.customer_id,
    ROUND(
        (p.price_m * (1.00 - (x/100))) * 
        (d.consensus_baseline_demand * (1.00 + (y/100))), 
        2
    ) AS monthly_revenue
FROM 
    md_transaction t
JOIN 
    price_data p 
    ON t.product_id = p.product_id AND t.customer_id = p.customer_id
JOIN 
    demand_data d 
    ON t.product_id = d.product_id AND t.customer_id = d.customer_id
WHERE 
    key_figure_date BETWEEN 'yyyy-mm-01' AND 'yyyy-12-01'
    AND date_format(key_figure_date, 'dd') = '01';
),
ytd_rev as (
	SELECT
		t.YTD_ACTUALS_REVENUE_CONSENSUS_DEMAND_REVENUE,
		t.product_id,
		t.customer_id
	FROM
		md_transaction t
	WHERE 
		key_figure_date = '2025-m1-01' -- here m1 is current month minus 1. if current month is 11 then m1 = 10. If current month mm is 1 then m1 will be 1
	
),
total_projected_revenue AS (
    SELECT 
        product_id,
        customer_id,
        SUM(monthly_revenue) AS total_revenue_to_december
    FROM 
        monthly_projected_revenue
    GROUP BY 
        product_id, customer_id
)
SELECT 
    t3.product_id,
    t3.customer_id,
    t3.customer_region,
    t3.target_revenue,
    t3.ytd_actual_revenue,
    t3.original_revenue_gap,
    ROUND(pr.total_revenue_to_december + ytd_rev.YTD_ACTUALS_REVENUE_CONSENSUS_DEMAND_REVENUE,2) AS projected_revenue,
    ROUND(t3.target_revenue - (pr.total_revenue_to_december + ytd_rev.YTD_ACTUALS_REVENUE_CONSENSUS_DEMAND_REVENUE), 2) AS new_revenue_gap
FROM 
    top_3_combinations t3
JOIN 
    total_projected_revenue pr ON t3.product_id = pr.product_id 
    AND t3.customer_id = pr.customer_id
JOIN
    ytd_rev ON t3.product_id = ytd_rev.product_id 
    AND t3.customer_id = ytd_rev.customer_id
WHERE (pr.total_revenue_to_december + ytd_rev.YTD_ACTUALS_REVENUE_CONSENSUS_DEMAND_REVENUE)>0
ORDER BY 
    t3.original_revenue_gap DESC;

